#!/bin/bash
################################################################################
#
# audacity-bridge - A command-line interface for Audacity
# Copyright (C) 2016 Vít Novotný
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# This script runs `audacity "$@"` and passes the standard input to the
# Audacity mod-script-pipe interface. Responses from the mod-script-pipe
# interface are returned through the standard output.
#
# The script requires that the mod-script-pipe module is installed, f.ex. to
# 
#   ~/.audacity-files/modules/mod-script-pipe.so
#
# and enabled in audacity. For more information, see
#
#   http://manual.audacityteam.org/o/man/scripting.html
#
################################################################################

REAL_UID=`id -ur`
FROM=/tmp/audacity_script_pipe.from.$REAL_UID
TO=/tmp/audacity_script_pipe.to.$REAL_UID
LOCK=/tmp/audacity_bridge.$REAL_UID

# Obtain $LOCK.
ANNOUNCED=false
while ! (set -o noclobber; echo "$$" >$LOCK) 2>&-; do
  if ! $ANNOUNCED; then
    ANNOUNCED=true
    cat 1>&2 <<EOF
Waiting for another instance of 'audacity-bridge' (PID `cat $LOCK`) to quit.
If you are certain no other instance of 'audacity-bridge' is running, remove
the file '$LOCK'.
EOF
  fi
  sleep 1s # This may starve.
done

# Release $LOCK in the case of an unexpected termination.
trap "rm $LOCK; exit 1" 1 2 3 6 15

# Remove existing pipes.
[ -p $FROM ] && rm $FROM
[ -p $TO ]   && rm $TO

# Run audacity and put down its PID.
audacity "$@" 2>/dev/null &
AUDACITY_PID=$!

# Wait for the mod-script-pipe module to kick in.
while ! [ -p $FROM -a -p $TO ]; do
  sleep 1s
done
sleep 1s # TODO: Find a better way to ensure that Audacity is ready to receive.

# Pass the responses from $FROM to stdout.
(<$FROM head -n-3 # mod-script-pipe sends \n\n\n at EOF and we also need to
                  # remove the output from the `Exit` menu command.

# Forcibly kill Audacity, when $FROM closes.
kill -TERM $AUDACITY_PID

# Clean up after Audacity.
rm $FROM $TO
for REPORT in /tmp/audacity_dbgrpt-*; do
  [ -d "$REPORT" ] && rm -rf "$REPORT"
done

# Release $LOCK.
rm $LOCK) &

# Feed stdin into $TO.
while read INPUT; do
  printf '%s\n' "$INPUT"
done >$TO

# Once we've hit the EOF, send the `Exit` menu command. This will close $FROM
# & crash Audacity. This is handled by the forked process reading from $FROM.
echo 'MenuCommand: CommandName=Exit' >$TO
